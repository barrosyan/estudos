# -*- coding: utf-8 -*-
"""Untitled126.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14qQLZB_xT5PqET_TyC9AL8OQ2NSaeCVp
"""

!pip install gplearn

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from gplearn.genetic import SymbolicRegressor

# Gere dados de exemplo (características e rótulos)
np.random.seed(0)
X = np.random.rand(100, 3)  # Características aleatórias
y = 3 * X[:, 0] + 2 * X[:, 1] - 5 * X[:, 2]  # Função linear simples

# Divida os dados em conjuntos de treinamento e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Treine um modelo de regressão de floresta aleatória (aprendizado de máquina)
rf_model = RandomForestRegressor(n_estimators=100, random_state=0)
rf_model.fit(X_train, y_train)

# Treine um modelo de regressão simbólica (regressão simbólica)
sr_model = SymbolicRegressor(population_size=1000, generations=20, function_set=('add', 'sub', 'mul', 'div', 'sqrt', 'log', 'abs', 'neg'), random_state=0)
sr_model.fit(X_train, y_train)

# Avalie o modelo de regressão simbólica
sr_score = sr_model.score(X_test, y_test)
print(f"Symbolic Regressor R-squared Score: {sr_score}")

# Exiba a expressão simbólica encontrada
best_expression = sr_model._program
print(f"Symbolic Regressor Expression: {best_expression}")

import sympy as sp
expression = sp.sympify(best_expression)
pretty_expression = sp.pretty(expression, use_unicode=True)

print("Expressão Simbólica Bonita:")
print(pretty_expression)

import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from gplearn.genetic import SymbolicRegressor
import sympy as sp

# Gere dados de exemplo (x, y) e crie um relacionamento
np.random.seed(0)
X = np.random.rand(100, 1)
y = 2 * X + np.random.rand(100, 1)  # Relação linear com ruído

# Divida os dados em conjuntos de treinamento e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Crie e treine uma rede neural simples com TensorFlow
model = tf.keras.Sequential([
    tf.keras.layers.Dense(1, input_shape=(1,))
])
model.compile(optimizer='sgd', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=100, verbose=0)

# Use a rede neural para fazer previsões
predictions = model.predict(X_test)

# Treine um Symbolic Regressor com base nas previsões da rede neural
sr_model = SymbolicRegressor(population_size=1000, generations=20, function_set=('add', 'sub', 'mul', 'div', 'sqrt', 'log', 'abs', 'neg'), random_state=0)
sr_model.fit(X_test, predictions)

# Avalie o Symbolic Regressor
sr_score = sr_model.score(X_test, predictions)
print(f"Symbolic Regressor R-squared Score: {sr_score}")

# Exiba a expressão simbólica encontrada
best_expression = sr_model._program
print(f"Symbolic Regressor Expression: {best_expression}")

# Converta a expressão simbólica em uma forma mais bonita
expression = sp.sympify(str(best_expression))
pretty_expression = sp.pretty(expression, use_unicode=True)

print("Expressão Simbólica Bonita:")
print(pretty_expression)

